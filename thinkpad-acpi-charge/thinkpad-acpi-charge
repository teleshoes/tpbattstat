#!/usr/bin/perl
use strict;
use warnings;
use File::Basename qw(basename);

sub readFile($);
sub writeFileSudo($$);

my $EXEC = basename $0;

my $FIELD_START_THRESHOLD = "charge_control_start_threshold";
my $FIELD_STOP_THRESHOLD = "charge_control_end_threshold";
my $FIELD_CHARGE_BEHAVIOUR = "charge_behaviour";

my $MODE_GET_INFO = "get-info";
my $MODE_READ_DEV = "read";
my $MODE_WRITE_DEV = "write";

my $USAGE = "Usage:
  $EXEC -h | --help
    show this message

  $EXEC
  $EXEC -g | --get
    print one per line:
    BAT<BATTERY_ID>: <START> - <STOP> <CHARGE_BEHAVIOR>

  $EXEC --start BATTERY_ID
    read START_THRESHOLD from:
      /sys/class/power_supply/BAT<BATTERY_ID>/charge_control_start_threshold

  $EXEC --start BATTERY_ID START_THRESHOLD
    write START_THRESHOLD from:
      /sys/class/power_supply/BAT<BATTERY_ID>/charge_control_start_threshold

  $EXEC --stop BATTERY_ID
    read STOP_THRESHOLD from:
      /sys/class/power_supply/BAT<BATTERY_ID>/charge_control_end_threshold

  $EXEC --stop BATTERY_ID STOP_THRESHOLD
    read STOP_THRESHOLD from:
      /sys/class/power_supply/BAT<BATTERY_ID>/charge_control_end_threshold

  $EXEC --charge BATTERY_ID
    read CHARGE_BEHAVIOUR from:
      /sys/class/power_supply/BAT<BATTERY_ID>/charge_behaviour

  $EXEC --charge BATTERY_ID CHARGE_BEHAVIOUR
    write CHARGE_BEHAVIOUR to:
      /sys/class/power_supply/BAT<BATTERY_ID>/charge_behaviour

  BATTERY_ID:         0 | 1 | 2 | 3
  CHARGE_BEHAVIOUR:   auto | inhibit-charge | force-discharge
  START_THRESHOLD:    integer between 0 and 100
  STOP_THRESHOLD:     integer between 0 and 100
";

sub main(@){
  my $mode = undef;
  my $field = undef;
  my $battID = undef;
  my $value = undef;

  while(@_ > 0){
    my $arg = shift @_;
    if($arg =~ /^(-h|--help)$/){
      print $USAGE;
      exit 0;
    }elsif($arg =~ /^(-g|--get)$/){
      $mode = $MODE_GET_INFO;
    }elsif($arg =~ /^(--start)$/){
      $field = $FIELD_START_THRESHOLD;
    }elsif($arg =~ /^(--stop)$/){
      $field = $FIELD_STOP_THRESHOLD;
    }elsif($arg =~ /^(--charge)$/){
      $field = $FIELD_CHARGE_BEHAVIOUR;
    }elsif($arg =~ /^(0|1|2|3)$/ and not defined $battID and not defined $value){
      $battID = $arg;
    }elsif($arg =~ /^(auto|inhibit-charge|force-discharge)$/){
      $value = $arg;
    }elsif($arg =~ /^(\d|\d\d|100)$/ and defined $battID and not defined $value){
      $value = $arg;
    }else{
      die "$USAGE\nERROR: unknown arg $arg\n";
    }
  }

  if(defined $battID and defined $field and not defined $value){
    $mode = $MODE_READ_DEV;
  }elsif(defined $battID and defined $field and defined $value){
    $mode = $MODE_WRITE_DEV;
  }elsif(not defined $battID and not defined $field and not defined $value){
    $mode = $MODE_GET_INFO;
  }elsif(not defined $field){
    die "$USAGE\nERROR: missing --start/--stop/--charge\n";
  }elsif(not defined $battID or $battID !~ /^\d+$/){
    die "$USAGE\nERROR: missing/invalid BATTERY_ID\n";
  }elsif(defined $value and $value !~ /^(\d+|auto|inhibit-charge|force-discharge)$/){
    die "$USAGE\nERROR: invalid VALUE\n";
  }else{
    die "$USAGE\nERROR: unknown mode\n";
  }

  if($mode eq $MODE_GET_INFO){
    my @dirs = grep {-d $_} glob "/sys/class/power_supply/BAT*";
    for my $dir(@dirs){
      my $id = $1 if $dir =~ /BAT(\d+)\/?$/;
      my $start = readFile "$dir/$FIELD_START_THRESHOLD";
      chomp $start;
      my $stop = readFile "$dir/$FIELD_STOP_THRESHOLD";
      chomp $stop;
      my $charge = readFile "$dir/$FIELD_CHARGE_BEHAVIOUR";
      chomp $charge;
      if($charge =~ /(\[[a-zA-Z0-9_\-]+\])/){
        $charge = $1;
      }
      print "BAT$id: $start - $stop $charge\n";
    }
  }elsif($mode eq $MODE_READ_DEV){
    my $dev = "/sys/class/power_supply/BAT${battID}/${field}";
    print readFile($dev);
  }elsif($mode eq $MODE_WRITE_DEV){
    my $dev = "/sys/class/power_supply/BAT${battID}/${field}";
    writeFileSudo($dev, "$value\n");
  }else{
    die "ERROR: unknown mode $mode\n";
  }
}

sub readFile($){
  my ($file) = @_;
  open FH, "< $file" or die "Could not read $file\n";
  my $content = join '', <FH>;
  close FH;
  return $content;
}

sub writeFileSudo($$){
  my ($file, $contents) = @_;
  if(`whoami` eq "root\n"){
    open FH, "> $file" or die "ERROR: Could not write $file\n$!\n";
  }else{
    open FH, "|-", "sudo", "tee", $file or die "ERROR: Could not write $file\n$!\n";
  }
  print FH $contents;
  close FH;
}

&main(@ARGV);
