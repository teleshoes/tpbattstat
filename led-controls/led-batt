#!/usr/bin/perl
use strict;
use warnings;
use File::Basename qw(basename);
use Time::HiRes qw(sleep);
use List::Util qw(max);

my $pidfile = "/tmp/led-batt-pid";

my @initialLEDsOff = qw(green:batt orange:batt power);

my @synonymsArr = (
  'off' => [qw(3600)],

  'all'    => [qw(P G O 60)],
  'power'  => [qw(P     60)],
  'green'  => [qw(  G   60)],
  'orange' => [qw(    O 60)],

  'slowblink-pgo' => [qw(P G O 3     p g o 3)],
  'slowblink-p'   => [qw(P     3     p     3)],
  'slowblink-g'   => [qw(  G   3       g   3)],
  'slowblink-o'   => [qw(    O 3         o 3)],
  'slowblink-pg'  => [qw(P G   3     p g   3)],
  'slowblink-po'  => [qw(P   O 3     p   o 3)],
  'slowblink-go'  => [qw(  G O 3       g o 3)],

  'blink-pgo'     => [qw(P G O 1     p g o 1)],
  'blink-p'       => [qw(P     1     p     1)],
  'blink-g'       => [qw(  G   1       g   1)],
  'blink-o'       => [qw(    O 1         o 1)],
  'blink-pg'      => [qw(P G   1     p g   1)],
  'blink-po'      => [qw(P   O 1     p   o 1)],
  'blink-go'      => [qw(  G O 1       g o 1)],

  'fastblink-pgo' => [qw(P G O 0.1   p g o 0.1)],
  'fastblink-p'   => [qw(P     0.1   p     0.1)],
  'fastblink-g'   => [qw(  G   0.1     g   0.1)],
  'fastblink-o'   => [qw(    O 0.1       o 0.1)],
  'fastblink-pg'  => [qw(P G   0.1   p g   0.1)],
  'fastblink-po'  => [qw(P   O 0.1   p   o 0.1)],
  'fastblink-go'  => [qw(  G O 0.1     g o 0.1)],
);

my %synonyms = @synonymsArr;

sub parseCmdStr($);
sub performCmd($);
sub killPidfile();
sub savePid();
sub formatSynonymsUsage();

my $EXEC = basename $0;
my $LED_CMD = "led";

my $usage = "Usage:
   Turn LEDs on/off with a specified pattern using `$LED_CMD`

   $EXEC -h | --help
     print this message

   $EXEC --stop
     kills the process in pidfile $pidfile

   $EXEC [OPTS] CMD CMD CMD ....
     -Kill the process in pidfile $pidfile and writes pid to pidfile
     -Turn off all these LEDs: @initialLEDsOff
     -Run run all the indicated CMDs, in a loop forever (or once with --once)

     CMD:
       <LED_NAME>-on    turn ON led named LED_NAME
       <LED_NAME>-off   turn OFF led named LED_NAME
       <DELAY>          pause for 'DELAY' seconds {e.g. 0.1, 1.5, 30, 60.0}
       G                \"green:batt-on\"   - turn ON green led
       g                \"green:batt-off\"  - turn OFF green led
       O                \"orange:batt-on\"  - turn ON orange led
       o                \"orange:batt-off\" - turn OFF orange led
       P                \"power-on\"        - turn ON power led
       p                \"power-off\"       - turn OFF power led
       <SYNONYM>        run the sequence of commands in SYNONYM

     SYNONYM:\n" . formatSynonymsUsage() . "

     OPTS
       --loop
         run this sequence forever (default)
       -o | --once
         run this sequence once, and exit
";

sub main(@){
  my $once = 0;
  while(@_ > 0 and $_[0] =~ /^(-h|--help|--loop|-o|--once)$/){
    my $opt = shift;
    if($opt =~ /^-h|--help$/){
      print $usage;
      exit 0;
    }elsif($opt =~ /^(--loop)$/){
      $once = 0;
    }elsif($opt =~ /^(-o|--once)$/){
      $once = 1;
    }else{
      die "$usage\nERROR: unknown option $opt\n";
    }
  }

  if(@_ == 1 and $_[0] eq '--stop'){
    killPidfile();
    exit;
  }

  my @cmds;
  for my $cmdStr(@_){
    @cmds = (@cmds, parseCmdStr $cmdStr);
  }

  die "$usage\nERROR: no CMD given\n" if @cmds == 0;

  killPidfile();
  savePid();

  for my $led(@initialLEDsOff){
    performCmd {cmd=>"off", led=>$led};
  }

  print "\nstarting loop:\n";
  while(1){
    performCmd $_ foreach @cmds;
    exit 0 if $once;
  }
}

sub parseCmdStr($){
  my ($cmdStr) = @_;

  my @cmds;
  if($cmdStr =~ /^([a-zA-Z0-9_:]+)-(on|off)$/){
    @cmds = ({cmd=>$1, led=>$2});
  }elsif($cmdStr =~ /^(\d+|\d*\.\d+)$/){
    @cmds = ({cmd=>"sleep", delay=>$1});
  }elsif($cmdStr =~ /^G$/){
    @cmds = ({cmd=>"on", led=>"green:batt"});
  }elsif($cmdStr =~ /^g$/){
    @cmds = ({cmd=>"off", led=>"green:batt"});
  }elsif($cmdStr =~ /^O$/){
    @cmds = ({cmd=>"on", led=>"orange:batt"});
  }elsif($cmdStr =~ /^o$/){
    @cmds = ({cmd=>"off", led=>"orange:batt"});
  }elsif($cmdStr =~ /^P$/){
    @cmds = ({cmd=>"on", led=>"power"});
  }elsif($cmdStr =~ /^p$/){
    @cmds = ({cmd=>"off", led=>"power"});
  }elsif(defined $synonyms{$cmdStr}){
    @cmds = map {parseCmdStr $_} @{$synonyms{$cmdStr}};
  }else{
    die "$usage\nERROR: unknown command $cmdStr\n";
  }

  return @cmds;
}

sub performCmd($){
  my ($cmd) = @_;
  if($$cmd{cmd} eq "on"){
    system "$LED_CMD $$cmd{led} on";
  }elsif($$cmd{cmd} eq "off"){
    system "$LED_CMD $$cmd{led} off";
  }elsif($$cmd{cmd} eq "sleep"){
    print "  sleep $$cmd{delay}s\n";
    sleep $$cmd{delay};
  }else{
    die "ERROR: unknown cmd\n";
  }
}

sub killPidfile(){
  if(-e $pidfile){
    system "kill -9 `cat $pidfile` 2>/dev/null";
  }
}
sub savePid(){
  system "echo $$ > $pidfile";
}

sub formatSynonymsUsage(){
  my $fmt = "";
  my $maxLen = max(map {length} keys %synonyms);

  for(my $i=0; $i<@synonymsArr; $i+=2){
    my $name = $synonymsArr[$i];
    my @cmd = @{$synonyms{$name}};
    $name .= ' ' x ($maxLen - length $name);
    $fmt .= "      $name   =>   @cmd\n";
  }

  return $fmt;
}

&main(@ARGV);
