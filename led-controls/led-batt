#!/usr/bin/perl
use strict;
use warnings;
use Time::HiRes qw(sleep);
use List::Util qw(max);

my $pidfile = "/tmp/led-batt-pid";

my @synonymsArr = (
  'off' => [qw(o g 60)],
  'green' => [qw(o G 60)],
  'orange' => [qw(g O 60)],
  'both' => [qw(G O 60)],

  'slowblink-green' => [qw(o G 3 g 3)],
  'blink-green' => [qw(o G 1 g 1)],
  'fastblink-green' => [qw(o G 0.1 g 0.1)],

  'slowblink-orange' => [qw(g O 3 o 3)],
  'blink-orange' => [qw(g O 1 o 1)],
  'fastblink-orange' => [qw(g O 0.1 o 0.1)],
  'fastblink-orange-and-power' => [qw(g O power-on 0.1 o power-off 0.1)],

  'slowblink-both' => [qw(G O 3 g o 3)],
  'blink-both' => [qw(G O 1 g o 1)],
  'fastblink-both' => [qw(G O 0.1 g o 0.1)],
);
my %synonyms = @synonymsArr;

my $synonymUsage = "$0 CMD_LOOP_SYNONYMS\n" .
  "      single-arg shorthand for a series of commands\n";
my $maxLen = max(map {length} keys %synonyms);
for(my $i=0; $i<@synonymsArr; $i+=2){
  my $name = $synonymsArr[$i];
  my @cmd = @{$synonyms{$name}};
  $name .= ' ' x ($maxLen - length $name);
  $synonymUsage .= "      $name => (@cmd)\n";
}

my $usage = "Usage:
   $0 --stop
     kill the currently running pattern

   $synonymUsage
   $0 CMD CMD CMD ....
     CMDs get performed forever in a loop
     Valid CMDs are:
       <LED_NAME>-on    turn ON led named LED_NAME
       <LED_NAME>-off   turn OFF led named LED_NAME
       G                turn ON green led
       g                turn OFF green led
       O                turn ON orange led
       o                turn OFF orange led
       <DELAY>          pause for 'DELAY' seconds {e.g. 0.1, 1.5, 30, 60.0}
     previous run pattern gets killed first
     e.g.: blink lights merrily
     $0 o g 0.1 O 0.1 o G 0.1 g 0.1 O G 0.1
";

sub killOthers(){
  if(-e $pidfile){
    system "kill -9 `cat $pidfile` 2>/dev/null";
  }
}
sub savePid(){
  system "echo $$ > $pidfile";
}

sub performCmd($){
  my $cmd = shift;
  if($cmd =~ /^(\d+|\d*\.\d+)$/){
    print "  (sleeping for $1 seconds)\n";
    sleep $1;
  }else{
    my ($led, $onOff);
    if($cmd =~ /^(G)$/){
      ($led, $onOff) = ("green:batt", "on");
    }elsif($cmd =~ /^(g)$/){
      ($led, $onOff) = ("green:batt", "off");
    }elsif($cmd =~ /^(O)$/){
      ($led, $onOff) = ("orange:batt", "on");
    }elsif($cmd =~ /^(o)$/){
      ($led, $onOff) = ("orange:batt", "off");
    }elsif($cmd =~ /^([a-zA-Z0-9_:]+)-(on|off)$/){
      ($led, $onOff) = ($1, $2);
    }else{
      die "UNKNOWN COMMAND: $cmd\n";
    }
    print " $led => $onOff\n";
    system "led $led $onOff > /dev/null";
  }
}

sub main(@){
  die $usage if @_ == 0;
  if(@_ == 1 and $_[0] eq '--stop'){
    killOthers();
    exit;
  }
  my @cmd;
  if(@_ == 1 and defined $synonyms{$_[0]}){
     @cmd = @{$synonyms{$_[0]}};
     print "$_[0] => @cmd\n";
  }else{
    @cmd = @_;
  }

  for my $cmd(@cmd){
    die $usage if $cmd !~ /^([a-zA-Z0-9_:]+-(on|off)|G|g|O|o|\d+|\d*\.\d+)$/;
  }
  killOthers();
  savePid();
  while(1){
    performCmd $_ foreach @cmd;
  }
}

&main(@ARGV);
