#!/usr/bin/perl
use strict;
use warnings;
use File::Basename qw(basename);

my $LED_DIR = "/sys/devices/platform/thinkpad_acpi/leds";
my $EXEC = basename $0;

sub ensureRoot();
sub getDeviceByLEDName($);
sub getLEDNames();
sub readDev($);
sub writeDev($$);

my %synonyms = (
  mic      => [qw(micmute mute_mic)],
  micmute  => [qw(mute_mic)],
  mute_mic => [qw(micmute)],
);
my $synonymsFmt = join '', map {"\n      $_ => (@{$synonyms{$_}})"} sort keys %synonyms;

my @validLeds = getLEDNames();

my $usage = "Usage:
  $EXEC --help|-h|help
    show this message

  $EXEC --list|-l|list
     print available LED names:
       @validLeds

  $EXEC LED_NAME --dev|--device|-d|dev
     print the full path to the LED brightness device

  $EXEC LED_NAME --get|-g|get
    read current value of the LED brightness device

  $EXEC LED_NAME --set|-s|set BRIGHTNESS
  $EXEC LED_NAME BRIGHTNESS
    write BRIGHTNESS integer to the LED brightness device

  $EXEC LED_NAME
  $EXEC LED_NAME --toggle|-t|toggle
  $EXEC LED_NAME --set|-s|set
    (this is the default command)
    similar to:
      [[ `$EXEC LED_NAME --get` =~ '0' ]] && val=1 || val=0
      $EXEC LED_NAME --set \$val

  $EXEC LED_NAME --on|on
    same as: $EXEC LED_NAME --set 1

  $EXEC LED_NAME --off|off
    same as: $EXEC LED_NAME --set 0

  LED_NAME
    -must be [a-zA-Z0-9_][a-zA-Z0-9:_\\-]*
      -can contain only letters, numbers, colons, underscores or hyphens
      -first character must be letter, number or underscore
    -the first LED device that matches below is used:
       $LED_DIR/<led-name>/brightness
       $LED_DIR/tpacpi:<led-name>/brightness
       $LED_DIR/tpacpi::<led-name>/brightness
       $LED_DIR/platform::<led-name>/brightness
    -if no LED device is found, the following synonyms are tried:$synonymsFmt

    e.g.:
      -'green:batt' can match 'tpacpi:green:batt'
      -'mute_mic' can match 'tpacpi::mute_mic'
      -'micmute' can match 'platform::micmute'
";

my $CMD_LIST_LEDS = "list-leds";
my $CMD_DEV_PATH = "dev-path";
my $CMD_GET = "get";
my $CMD_SET = "set";

sub main(@){
  my $cmd = $CMD_SET;
  my $ledName = undef;
  my $brightness = undef;
  while(@_ > 0){
    my $arg = shift @_;
    if($arg =~ /^(--help|-h|help)$/){
      print $usage;
      exit 0;
    }elsif($arg =~ /^(--list|-l|list)$/){
      $cmd = $CMD_LIST_LEDS;
    }elsif($arg =~ /^(--dev|--device|-d|dev)$/){
      $cmd = $CMD_DEV_PATH;
    }elsif($arg =~ /^(--get|-g|get)$/){
      $cmd = $CMD_GET;
    }elsif($arg =~ /^(--set|-s|set)$/){
      $cmd = $CMD_SET;
    }elsif($arg =~ /^(--toggle|-t|toggle)$/){
      $cmd = $CMD_SET;
      $brightness = undef;
    }elsif($arg =~ /^(--on|on)$/){
      $cmd = $CMD_SET;
      $brightness = 1;
    }elsif($arg =~ /^(--off|off)$/){
      $cmd = $CMD_SET;
      $brightness = 0;
    }elsif($arg =~ /^(\d+)$/){
      my $val = $1;
      die "ERROR: duplicate BRIGHTNESS $val + $brightness\n" if defined $brightness;
      $brightness = $val;
      $cmd = $CMD_SET;
    }elsif($arg =~ /^([a-zA-Z0-9_][a-zA-Z0-9:_\\-]*)$/){
      die "ERROR: duplicate LED_NAME $arg + $ledName\n" if defined $ledName;
      $ledName = $1;
    }else{
      die "ERROR: unknown arg $arg\n";
    }
  }

  if($cmd =~ /^($CMD_DEV_PATH|$CMD_GET|$CMD_SET)$/){
    die "ERROR: must set LED_NAME for $cmd\n" if not defined $ledName;
  }else{
    die "ERROR: cannot set LED_NAME for $cmd\n" if defined $ledName;
  }

  if($cmd !~ /^($CMD_SET)$/){
    die "ERROR: cannot set BRIGHTNESS for $cmd\n" if defined $brightness;
  }

  if($cmd eq $CMD_LIST_LEDS){
    my @ledNames = getLEDNames();
    print "@ledNames\n";
  }elsif($cmd eq $CMD_DEV_PATH){
    my $dev = getDeviceByLEDName $ledName;
    die "ERROR: could not find $ledName in $LED_DIR\n" if not defined $dev;
    print "$dev\n";
  }elsif($cmd eq $CMD_GET){
    my $dev = getDeviceByLEDName $ledName;
    die "ERROR: could not find $ledName in $LED_DIR\n" if not defined $dev;
    my $value = readDev $dev;

    print "LED $ledName: $value\n";
  }elsif($cmd eq $CMD_SET){
    ensureRoot();
    my $dev = getDeviceByLEDName $ledName;
    die "ERROR: could not find $ledName in $LED_DIR\n" if not defined $dev;
    my $oldValue = readDev $dev;

    if(not defined $brightness){
      $brightness = $oldValue == 0 ? 1 : 0;
    }

    writeDev $dev, $brightness;
    my $newValue = readDev $dev;
    print "LED $ledName $oldValue => $newValue\n";
  }else{
    die "ERROR: invalid command: $cmd\n";
  }
}

sub ensureRoot(){
  if(`whoami` ne "root\n"){
    my @cmd = ('sudo', $0, @ARGV);
    exec @cmd;
  }
}

sub getDeviceByLEDName($){
  my ($ledName) = @_;

  my @synonyms = ($ledName);
  if(defined $synonyms{$ledName}){
    @synonyms = (@synonyms, @{$synonyms{$ledName}});
  }

  my @possibleDevs;
  for my $name(@synonyms){
    @possibleDevs = (@possibleDevs,
      "$LED_DIR/$name/brightness",
      "$LED_DIR/tpacpi:$name/brightness",
      "$LED_DIR/tpacpi::$name/brightness",
      "$LED_DIR/platform::$name/brightness",
    );
  }
  for my $dev(@possibleDevs){
    return $dev if -e $dev;
  }
  return undef;
}

sub getLEDNames(){
  my @ledDevs = glob "$LED_DIR/*/brightness";
  my @ledNames = @ledDevs;
  @ledNames = map {s/^$LED_DIR\/([^\/]+)\/brightness$/$1/; $_} @ledDevs;
  @ledNames = map {s/^(tpacpi::|tpacpi:|platform::)//; $_} @ledDevs;
  return @ledNames;
}

sub readDev($){
  my ($dev) = @_;
  open FH, "< $dev" or die "ERROR: could not read $dev\n$!\n";
  my $val = join '', <FH>;
  close FH;
  $val =~ s/\s|\r|\n//g;
  if($val !~ /^\d+$/){
    die "invalid value of $dev: $val\n";
  }
  return $val;
}
sub writeDev($$){
  my ($dev, $val) = @_;
  open FH, "> $dev" or die "ERROR: could not write $dev\n$!\n";
  print FH "$val\n";
  close FH;
}

&main(@ARGV);
