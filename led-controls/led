#!/usr/bin/perl
use strict;
use warnings;
use File::Basename qw(basename);

my $LED_DIR = "/sys/devices/platform/thinkpad_acpi/leds";
my $EXEC = basename $0;

sub ensureRoot();
sub getDeviceByLEDName($);
sub getLEDNames();
sub readDev($);
sub writeDev($$);

my @validLeds = getLEDNames();

my $usage = "Usage:
  $EXEC -h|--help
    show this message

  $EXEC --list
     print available LED names:
       @validLeds

  $EXEC LED_NAME --get
    read current value of the LED brightness device

  $EXEC LED_NAME [on|off|toggle|BRIGHTNESS_INTEGER]
    write indicated value to the LED brightness device
      on:         1
      off:        0
      toggle:     if `--get` returns 0, then 1, else 0
      BRIGHTNESS: to this specified integer

  $EXEC LED_NAME
     same as `$EXEC LED_NAME toggle`

  LED_NAME
    -must be [a-zA-Z0-9:_\\-]+
      {only letters, numbers, colons, underscores or hyphens}
    -the first LED device that matches below is used:
       $LED_DIR/<led-name>/brightness
       $LED_DIR/tpacpi:<led-name>/brightness
       $LED_DIR/tpacpi::<led-name>/brightness

    e.g.:
      -'green:batt' can match 'tpacpi:green:batt'
      -'mute_mic' can match 'tpacpi::mute_mic'
";

sub main(@){
  if(@_ == 1 and $_[0] =~ /^(-h|--help)$/){
    print $usage;
  }elsif(@_ == 1 and $_[0] =~ /^(--list)$/){
    my @ledNames = getLEDNames();
    print "@ledNames\n";
  }elsif((@_ == 1 or @_ == 2) and $_[0] =~ /^[a-zA-Z0-9:_\\-]+$/){
    my ($ledName, $cmd) = @_;
    $cmd = "toggle" if not defined $cmd;

    if($cmd =~ /^(--get)$/){
      my $dev = getDeviceByLEDName $ledName;
      die "ERROR: could not find $ledName in $LED_DIR\n" if not defined $dev;
      my $value = readDev $dev;

      print "LED $ledName: $value\n";
    }elsif($cmd =~ /^(on|off|toggle|\d+)$/){
      ensureRoot();
      my $dev = getDeviceByLEDName $ledName;
      die "ERROR: could not find $ledName in $LED_DIR\n" if not defined $dev;
      my $oldValue = readDev $dev;

      my $brightness;
      $brightness = 1 if $cmd =~ /^(on)$/;
      $brightness = 0 if $cmd =~ /^(off)$/;
      $brightness = $oldValue == 0 ? 1 : 0 if $cmd =~ /^(toggle)$/;
      $brightness = $cmd if $cmd =~ /^(\d+)$/;

      writeDev $dev, $brightness;
      my $newValue = readDev $dev;
      print "LED $ledName $oldValue => $newValue\n";
    }else{
      die "invalid command: $cmd\n";
    }
  }else{
    die $usage;
  }
}

sub ensureRoot(){
  if(`whoami` ne "root\n"){
    my @cmd = ('sudo', $0, @ARGV);
    exec @cmd;
  }
}

sub getDeviceByLEDName($){
  my ($ledName) = @_;

  my @possibleDevs = (
    "$LED_DIR/$ledName/brightness",
    "$LED_DIR/tpacpi:$ledName/brightness",
    "$LED_DIR/tpacpi::$ledName/brightness",
  );

  for my $dev(@possibleDevs){
    return $dev if -e $dev;
  }
  return undef;
}

sub getLEDNames(){
  my @ledDevs = glob "$LED_DIR/*/brightness";
  my @ledNames = @ledDevs;
  @ledNames = map {s/^$LED_DIR\/([^\/]+)\/brightness$/$1/; $_} @ledDevs;
  @ledNames = map {s/^(tpacpi::|tpacpi:)//; $_} @ledDevs;
  return @ledNames;
}

sub readDev($){
  my ($dev) = @_;
  open FH, "< $dev" or die "ERROR: could not read $dev\n$!\n";
  my $val = join '', <FH>;
  close FH;
  $val =~ s/\s|\r|\n//g;
  if($val !~ /^\d+$/){
    die "invalid value of $dev: $val\n";
  }
  return $val;
}
sub writeDev($$){
  my ($dev, $val) = @_;
  open FH, "> $dev" or die "ERROR: could not write $dev\n$!\n";
  print FH "$val\n";
  close FH;
}

&main(@ARGV);
