#!/usr/bin/perl
use strict;
use warnings;

my $LED_DIR = "/sys/devices/platform/thinkpad_acpi/leds";

sub sudoRexec(){
  if(`whoami` ne "root\n"){
    my @cmd = ('sudo', $0, @ARGV);
    exec @cmd;
  }
}

sub getValidLeds();
sub readDev($);
sub writeDev($$);

my $usage = "Usage:\n"
  . " $0 <led-name> --get\n"
  . "      print current value of LED/brightness\n"
  . "\n"
  . " $0 <led-name>\n"
  . "      toggle LED/brightness\n"
  . "\n"
  . " $0 <led-name> [<on|off|toggle> | brightness-integer]\n"
  . "      set LED/brightness to 1, 0, or a specified integer\n"
  . "\n"
  . " $0 --list\n"
  . "      print available LED names:\n" . getValidLeds()
  . "\n"
  . "  led-name must be [a-zA-Z0-9:_-]+\n"
  . "    {only letters, numbers, colons, underscores or hyphens}\n"
  . "  LED devices are in $LED_DIR/<led-name>/brightness\n"
  . "  the prefix 'tpacpi:' is removed from name if present, and either-\n"
  . "    1) tpacpi:: is prepended if name does NOT have a colon in it\n"
  . "    2) tpacpi: is prepended if name DOES have a colon in it\n"
  . "  e.g.:\n"
  . "    'tpacpi:green:batt'  =>  'tpacpi:green:batt'\n"
  . "    'green:batt'         =>  'tpacpi:green:batt'\n"
  . "    'mute_mic'           =>  'tpacpi::mute_mic'\n"
  . "    'tpacpi:mute_mic'    =>  'tpacpi::mute_mic'\n"
  . "    'tpacpi::mute_mic'   =>  'tpacpi::mute_mic'\n"
;

sub main(@){
  if(@_ == 1 and $_[0] eq '--list'){
    print getValidLeds();
    exit 0;
  }

  my $name = $_[0];
  die $usage if not defined $name;

  $name =~ s/^tpacpi://;
  $name = ":$name" if $name !~ /:/;
  $name = "tpacpi:$name";

  die $usage if $name !~ /^([a-zA-Z0-9:_-]+)$/;

  my $arg = lc $_[1] if @_ >= 2;
  $arg = 'toggle' if not defined $arg;
  if(@_ > 2 or $arg !~ /^(--get|on|off|toggle|\d+)$/i){
    die $usage;
  }

  my $dev = "$LED_DIR/$name/brightness";

  if(not -e $dev){
    die "No led device found at $dev\n";
  }

  if($arg eq '--get'){
    print "LED $name: " . (readDev $dev) . "\n";
  }else{
    sudoRexec();
    
    my $old = readDev $dev;
    
    my $brightness;
    $brightness = 1 if $arg eq 'on';
    $brightness = 0 if $arg eq 'off';
    $brightness = $old == 0 ? 1 : 0 if lc $arg eq 'toggle';
    $brightness = $arg if $arg =~ /^\d+$/;

    writeDev $dev, $brightness;
    my $new = readDev $dev;
    print "LED $name: $old => $new\n";
  }
}

sub getValidLeds(){
  my @validLeds = `ls $LED_DIR`;
  s/^tpacpi(::|:)//g foreach @validLeds;
  chomp foreach @validLeds;
  @validLeds = sort @validLeds;

  my $linePrefix = "      ";
  my $devSep = " ";
  
  my $valid = '';
  my @acc;
  for(my $i=0; $i<@validLeds; $i++){
    if($i == $#validLeds or @acc == 5){
      $valid .= $linePrefix . (join $devSep, @acc) . "\n";
      @acc = ();
    }
    push @acc, $validLeds[$i];
  }
  return $valid;
}

sub readDev($){
  my $dev = shift;
  open FH, "< $dev" or die "Could not read $dev: $!\n";
  my @out = <FH>;
  close FH;
  my $val = join '', @out;
  chomp $val;
  return $val;
}
sub writeDev($$){
  my $dev = shift;
  my $val = shift;
  open FH, "> $dev" or die "Could not write $dev: $!\n";
  print FH "$val\n";
  close FH;
}


&main(@ARGV);
